/**
 * Generated by orval v8.0.0-rc.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

import type {
  CreatePetsBody,
  Error,
  ListPetsParams,
  Pet,
  Pets,
} from '../model';

import { customInstance } from '../mutator/custom-instance';

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 407
  | 408
  | 409
  | 410
  | 411
  | 412
  | 413
  | 414
  | 415
  | 416
  | 417
  | 418
  | 419
  | 420
  | 421
  | 422
  | 423
  | 424
  | 426
  | 428
  | 429
  | 431
  | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes =
  | HTTPStatusCode1xx
  | HTTPStatusCode2xx
  | HTTPStatusCode3xx
  | HTTPStatusCode4xx
  | HTTPStatusCode5xx;

/**
 * @summary List all pets
 */
export type listPetsResponse200 = {
  data: Pets;
  status: 200;
};

export type listPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type listPetsResponseSuccess = listPetsResponse200 & {
  headers: Headers;
};
export type listPetsResponseError = listPetsResponseDefault & {
  headers: Headers;
};

export type listPetsResponse = listPetsResponseSuccess | listPetsResponseError;

export const getListPetsUrl = (
  params?: ListPetsParams,
  version: number = 1,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v${version}/pets?${stringifiedParams}`
    : `/v${version}/pets`;
};

export const listPets = async (
  params?: ListPetsParams,
  version: number = 1,
  options?: RequestInit,
): Promise<listPetsResponse> => {
  return customInstance<listPetsResponse>(getListPetsUrl(params, version), {
    ...options,
    method: 'GET',
  });
};

export const getListPetsKey = (params?: ListPetsParams, version: number = 1) =>
  [`/v${version}/pets`, ...(params ? [params] : [])] as const;

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = Error;

/**
 * @summary List all pets
 */
export const useListPets = <TError = Error>(
  params?: ListPetsParams,
  version: number = 1,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof listPets>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!version;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getListPetsKey(params, version) : null));
  const swrFn = () => listPets(params, version);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Create a pet
 */
export type createPetsResponse200 = {
  data: Pet;
  status: 200;
};

export type createPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type createPetsResponseSuccess = createPetsResponse200 & {
  headers: Headers;
};
export type createPetsResponseError = createPetsResponseDefault & {
  headers: Headers;
};

export type createPetsResponse =
  | createPetsResponseSuccess
  | createPetsResponseError;

export const getCreatePetsUrl = (version: number = 1) => {
  return `/v${version}/pets`;
};

export const createPets = async (
  createPetsBody: CreatePetsBody,
  version: number = 1,
  options?: RequestInit,
): Promise<createPetsResponse> => {
  return customInstance<createPetsResponse>(getCreatePetsUrl(version), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPetsBody),
  });
};

export const getCreatePetsMutationFetcher = (version: number = 1) => {
  return (_: Key, { arg }: { arg: CreatePetsBody }) => {
    return createPets(arg, version);
  };
};
export const getCreatePetsMutationKey = (version: number = 1) =>
  [`/v${version}/pets`] as const;

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationError = Error;

/**
 * @summary Create a pet
 */
export const useCreatePets = <TError = Error>(
  version: number = 1,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createPets>>,
      TError,
      Key,
      CreatePetsBody,
      Awaited<ReturnType<typeof createPets>>
    > & { swrKey?: string };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreatePetsMutationKey(version);
  const swrFn = getCreatePetsMutationFetcher(version);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse200 = {
  data: Pet;
  status: 200;
};

export type showPetByIdResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type showPetByIdResponseSuccess = showPetByIdResponse200 & {
  headers: Headers;
};
export type showPetByIdResponseError = showPetByIdResponseDefault & {
  headers: Headers;
};

export type showPetByIdResponse =
  | showPetByIdResponseSuccess
  | showPetByIdResponseError;

export const getShowPetByIdUrl = (petId: string, version: number = 1) => {
  return `/v${version}/pets/${petId}`;
};

export const showPetById = async (
  petId: string,
  version: number = 1,
  options?: RequestInit,
): Promise<showPetByIdResponse> => {
  return customInstance<showPetByIdResponse>(
    getShowPetByIdUrl(petId, version),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getShowPetByIdKey = (petId: string, version: number = 1) =>
  [`/v${version}/pets/${petId}`] as const;

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = Error;

/**
 * @summary Info for a specific pet
 */
export const useShowPetById = <TError = Error>(
  petId: string,
  version: number = 1,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof showPetById>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(version && petId);
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getShowPetByIdKey(petId, version) : null));
  const swrFn = () => showPetById(petId, version);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
