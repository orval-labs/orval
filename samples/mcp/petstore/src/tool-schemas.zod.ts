/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import { z as zod } from 'zod';

export const findPetsByStatusQueryParams = zod.object({
  status: zod
    .string()
    .optional()
    .describe('Status values that need to be considered for filter'),
});

export const findPetsByStatusResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string(),
  category: zod
    .object({
      id: zod.number().optional(),
      name: zod.string().optional(),
    })
    .optional(),
  photoUrls: zod.array(zod.string()),
  tags: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
  status: zod
    .enum(['available', 'pending', 'sold'])
    .optional()
    .describe('pet status in the store'),
});
export const findPetsByStatusResponse = zod.array(findPetsByStatusResponseItem);

export const findPetsByTagsQueryParams = zod.object({
  tags: zod.array(zod.string()).optional().describe('Tags to filter by'),
});

export const findPetsByTagsResponseItem = zod.object({
  id: zod.number().optional(),
  name: zod.string(),
  category: zod
    .object({
      id: zod.number().optional(),
      name: zod.string().optional(),
    })
    .optional(),
  photoUrls: zod.array(zod.string()),
  tags: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
  status: zod
    .enum(['available', 'pending', 'sold'])
    .optional()
    .describe('pet status in the store'),
});
export const findPetsByTagsResponse = zod.array(findPetsByTagsResponseItem);

export const getPetByIdParams = zod.object({
  petId: zod.number().describe('ID of pet to return'),
});

export const getPetByIdResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string(),
  category: zod
    .object({
      id: zod.number().optional(),
      name: zod.string().optional(),
    })
    .optional(),
  photoUrls: zod.array(zod.string()),
  tags: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
  status: zod
    .enum(['available', 'pending', 'sold'])
    .optional()
    .describe('pet status in the store'),
});

export const updatePetWithFormParams = zod.object({
  petId: zod.number().describe('ID of pet that needs to be updated'),
});

export const updatePetWithFormQueryParams = zod.object({
  name: zod
    .string()
    .optional()
    .describe('Name of pet that needs to be updated'),
  status: zod
    .string()
    .optional()
    .describe('Status of pet that needs to be updated'),
});

export const updatePetWithFormResponse = zod.object({
  id: zod.number().optional(),
  name: zod.string(),
  category: zod
    .object({
      id: zod.number().optional(),
      name: zod.string().optional(),
    })
    .optional(),
  photoUrls: zod.array(zod.string()),
  tags: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
  status: zod
    .enum(['available', 'pending', 'sold'])
    .optional()
    .describe('pet status in the store'),
});

export const deletePetParams = zod.object({
  petId: zod.number().describe('Pet id to delete'),
});

export const deletePetHeader = zod.object({
  api_key: zod.string().optional(),
});

export const getInventoryResponse = zod.record(zod.string(), zod.number());

export const getOrderByIdParams = zod.object({
  orderId: zod.number().describe('ID of order that needs to be fetched'),
});

export const getOrderByIdResponse = zod.object({
  id: zod.number().optional(),
  petId: zod.number().optional(),
  quantity: zod.number().optional(),
  shipDate: zod.string().datetime({}).optional(),
  status: zod
    .enum(['placed', 'approved', 'delivered'])
    .optional()
    .describe('Order Status'),
  complete: zod.boolean().optional(),
});

export const deleteOrderParams = zod.object({
  orderId: zod.number().describe('ID of the order that needs to be deleted'),
});

export const loginUserQueryParams = zod.object({
  username: zod.string().optional().describe('The user name for login'),
  password: zod
    .string()
    .optional()
    .describe('The password for login in clear text'),
});

export const loginUserResponse = zod.string();

export const getUserByNameParams = zod.object({
  username: zod
    .string()
    .describe('The name that needs to be fetched. Use user1 for testing'),
});

export const getUserByNameResponse = zod.object({
  id: zod.number().optional(),
  username: zod.string().optional(),
  firstName: zod.string().optional(),
  lastName: zod.string().optional(),
  email: zod.string().optional(),
  password: zod.string().optional(),
  phone: zod.string().optional(),
  userStatus: zod.number().optional().describe('User Status'),
});

export const deleteUserParams = zod.object({
  username: zod.string().describe('The name that needs to be deleted'),
});
