/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.27-SNAPSHOT
 */
import {
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormParams,
  LoginUserParams,
} from './http-schemas';

import {
  findPetsByStatus,
  findPetsByTags,
  getPetById,
  updatePetWithForm,
  deletePet,
  getInventory,
  getOrderById,
  deleteOrder,
  loginUser,
  logoutUser,
  getUserByName,
  deleteUser,
} from './http-client';

/**
 * Multiple status values can be provided with comma separated strings.
 * @summary Finds Pets by status.
 */

export type findPetsByStatusArgs = {
  queryParams: FindPetsByStatusParams;
};

export const findPetsByStatusHandler = async (args: findPetsByStatusArgs) => {
  const res = await findPetsByStatus(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags.
 */

export type findPetsByTagsArgs = {
  queryParams: FindPetsByTagsParams;
};

export const findPetsByTagsHandler = async (args: findPetsByTagsArgs) => {
  const res = await findPetsByTags(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Returns a single pet.
 * @summary Find pet by ID.
 */

export type getPetByIdArgs = {
  pathParams: {
    petId: number;
  };
};

export const getPetByIdHandler = async (args: getPetByIdArgs) => {
  const res = await getPetById(args.pathParams.petId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Updates a pet resource based on the form data.
 * @summary Updates a pet in the store with form data.
 */

export type updatePetWithFormArgs = {
  pathParams: {
    petId: number;
  };
  queryParams: UpdatePetWithFormParams;
};

export const updatePetWithFormHandler = async (args: updatePetWithFormArgs) => {
  const res = await updatePetWithForm(args.pathParams.petId, args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Delete a pet.
 * @summary Deletes a pet.
 */

export type deletePetArgs = {
  pathParams: {
    petId: number;
  };
};

export const deletePetHandler = async (args: deletePetArgs) => {
  const res = await deletePet(args.pathParams.petId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Returns a map of status codes to quantities.
 * @summary Returns pet inventories by status.
 */

export const getInventoryHandler = async () => {
  const res = await getInventory();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID.
 */

export type getOrderByIdArgs = {
  pathParams: {
    orderId: number;
  };
};

export const getOrderByIdHandler = async (args: getOrderByIdArgs) => {
  const res = await getOrderById(args.pathParams.orderId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 * @summary Delete purchase order by identifier.
 */

export type deleteOrderArgs = {
  pathParams: {
    orderId: number;
  };
};

export const deleteOrderHandler = async (args: deleteOrderArgs) => {
  const res = await deleteOrder(args.pathParams.orderId);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Log into the system.
 * @summary Logs user into the system.
 */

export type loginUserArgs = {
  queryParams: LoginUserParams;
};

export const loginUserHandler = async (args: loginUserArgs) => {
  const res = await loginUser(args.queryParams);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Log user out of the system.
 * @summary Logs out current logged in user session.
 */

export const logoutUserHandler = async () => {
  const res = await logoutUser();

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * Get user detail based on username.
 * @summary Get user by user name.
 */

export type getUserByNameArgs = {
  pathParams: {
    username: string;
  };
};

export const getUserByNameHandler = async (args: getUserByNameArgs) => {
  const res = await getUserByName(args.pathParams.username);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};

/**
 * This can only be done by the logged in user.
 * @summary Delete user resource.
 */

export type deleteUserArgs = {
  pathParams: {
    username: string;
  };
};

export const deleteUserHandler = async (args: deleteUserArgs) => {
  const res = await deleteUser(args.pathParams.username);

  return {
    content: [
      {
        type: 'text' as const,
        text: JSON.stringify(res),
      },
    ],
  };
};
