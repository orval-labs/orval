/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
  Axios,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';
import type axios from 'axios';

export type PetCallingCode = typeof PetCallingCode[keyof typeof PetCallingCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCallingCode = {
  '+33': '+33',
  '+420': '+420',
} as const;

export type PetCountry = typeof PetCountry[keyof typeof PetCountry];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCountry = {
  'People\'s_Republic_of_China': 'People\'s Republic of China',
  Uruguay: 'Uruguay',
} as const;

export interface Pet {
  id: number;
  /**
   * Name of pet
   * @minLength 40
   * @maxLength 0
   */
  name: string;
  /**
   * @minimum 0
   * @maximum 30
   * @exclusiveMinimum
   * @exclusiveMaximum
   */
  age?: number;
  /**
   * @nullable
   * @pattern ^\\d{3}-\\d{2}-\\d{4}$
   */
  tag?: string | null;
  email?: string;
  callingCode?: PetCallingCode;
  country?: PetCountry;
}

export interface PetsNestedArray {
  data?: Pet[];
}

/**
 * @minItems 1
 * @maxItems 20
 */
export type PetsArray = Pet[];

export interface Error {
  code: number;
  message: string;
}

export type ListPetsParams = {
/**
 * How many items to return at one time (max 100)
 */
limit?: string;
};

export type CreatePetsBody = {
  name: string;
  tag: string;
};

export type ListPetsNestedArrayParams = {
/**
 * How many items to return at one time (max 100)
 */
limit?: string;
};

export class SwaggerPetstoreClient {
  constructor(
    private axios: Axios = axios,
  ) {}/**
 * @summary List all pets
 */
 listPets<TData = PetsArray>(
    params?: ListPetsParams, options?: AxiosRequestConfig
  ): Promise<AxiosResponse<TData>>  {
    return this.axios.get<TData>(
      `/pets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create a pet
 */
 createPets<TData = void>(
    createPetsBody: CreatePetsBody, options?: AxiosRequestConfig
  ): Promise<AxiosResponse<TData>>  {
    return this.axios.post<TData>(
      `/pets`,
      createPetsBody,options
    );
  }

/**
 * @summary List all pets as nested array
 */
 listPetsNestedArray<TData = PetsNestedArray>(
    params?: ListPetsNestedArrayParams, options?: AxiosRequestConfig
  ): Promise<AxiosResponse<TData>>  {
    return this.axios.get<TData>(
      `/pets-nested-array`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Info for a specific pet
 */
 showPetById<TData = Pet>(
    petId: string, options?: AxiosRequestConfig
  ): Promise<AxiosResponse<TData>>  {
    return this.axios.get<TData>(
      `/pets/${petId}`,options
    );
  }

};

export type ListPetsClientResult = NonNullable<PetsArray>
export type CreatePetsClientResult = NonNullable<void>
export type ListPetsNestedArrayClientResult = NonNullable<PetsNestedArray>
export type ShowPetByIdClientResult = NonNullable<Pet>
