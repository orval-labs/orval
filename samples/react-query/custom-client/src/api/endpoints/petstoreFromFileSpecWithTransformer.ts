/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePetsBody,
  Error,
  ListPetsNestedArrayParams,
  ListPetsParams,
  Pet,
  PetsArray,
  PetsNestedArray,
} from '../model';

import { useCustomClient } from '../mutator/custom-client';
import type { ErrorType, BodyType } from '../mutator/custom-client';

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 407
  | 408
  | 409
  | 410
  | 411
  | 412
  | 413
  | 414
  | 415
  | 416
  | 417
  | 418
  | 419
  | 420
  | 421
  | 422
  | 423
  | 424
  | 426
  | 428
  | 429
  | 431
  | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes =
  | HTTPStatusCode1xx
  | HTTPStatusCode2xx
  | HTTPStatusCode3xx
  | HTTPStatusCode4xx
  | HTTPStatusCode5xx;

/**
 * @summary List all pets
 */
export type listPetsResponse200 = {
  data: PetsArray;
  status: 200;
};

export type listPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type listPetsResponseSuccess = listPetsResponse200 & {
  headers: Headers;
};
export type listPetsResponseError = listPetsResponseDefault & {
  headers: Headers;
};

export type listPetsResponse = listPetsResponseSuccess | listPetsResponseError;

export const getListPetsUrl = (
  params?: ListPetsParams,
  version: number = 1,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v${version}/pets?${stringifiedParams}`
    : `/v${version}/pets`;
};

export const listPets = async (
  params?: ListPetsParams,
  version: number = 1,
  options?: RequestInit,
): Promise<listPetsResponse> => {
  return useCustomClient<listPetsResponse>(getListPetsUrl(params, version), {
    ...options,
    method: 'GET',
  });
};

export const getListPetsQueryKey = (
  params?: ListPetsParams,
  version: number = 1,
) => {
  return [`/v${version}/pets`, ...(params ? [params] : [])] as const;
};

export const useListPetsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsParams,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListPetsQueryKey(params, version);

  const listPets = useListPetsHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>
  > = ({ signal }) => listPets(params, version, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!version,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>
>;
export type ListPetsQueryError = ErrorType<Error>;

/**
 * @summary List all pets
 */

export function useListPets<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsParams,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useListPetsHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useListPetsQueryOptions(params, version, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create a pet
 */
export type createPetsResponse201 = {
  data: void;
  status: 201;
};

export type createPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 201>;
};

export type createPetsResponseSuccess = createPetsResponse201 & {
  headers: Headers;
};
export type createPetsResponseError = createPetsResponseDefault & {
  headers: Headers;
};

export type createPetsResponse =
  | createPetsResponseSuccess
  | createPetsResponseError;

export const getCreatePetsUrl = (version: number = 1) => {
  return `/v${version}/pets`;
};

export const createPets = async (
  createPetsBody: CreatePetsBody,
  version: number = 1,
  options?: RequestInit,
): Promise<createPetsResponse> => {
  return useCustomClient<createPetsResponse>(getCreatePetsUrl(version), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPetsBody),
  });
};

export const useCreatePetsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    TError,
    { data: BodyType<CreatePetsBody>; version?: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
  TError,
  { data: BodyType<CreatePetsBody>; version?: number },
  TContext
> => {
  const mutationKey = ['createPets'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const createPets = useCreatePetsHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    { data: BodyType<CreatePetsBody>; version?: number }
  > = (props) => {
    const { data, version } = props ?? {};

    return createPets(data, version);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>
>;
export type CreatePetsMutationBody = BodyType<CreatePetsBody>;
export type CreatePetsMutationError = ErrorType<Error>;

/**
 * @summary Create a pet
 */
export const useCreatePets = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
    TError,
    { data: BodyType<CreatePetsBody>; version?: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof useCreatePetsHook>>>,
  TError,
  { data: BodyType<CreatePetsBody>; version?: number },
  TContext
> => {
  const mutationOptions = useCreatePetsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary List all pets as nested array
 */
export type listPetsNestedArrayResponse200 = {
  data: PetsNestedArray;
  status: 200;
};

export type listPetsNestedArrayResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type listPetsNestedArrayResponseSuccess =
  listPetsNestedArrayResponse200 & {
    headers: Headers;
  };
export type listPetsNestedArrayResponseError =
  listPetsNestedArrayResponseDefault & {
    headers: Headers;
  };

export type listPetsNestedArrayResponse =
  | listPetsNestedArrayResponseSuccess
  | listPetsNestedArrayResponseError;

export const getListPetsNestedArrayUrl = (
  params?: ListPetsNestedArrayParams,
  version: number = 1,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v${version}/pets-nested-array?${stringifiedParams}`
    : `/v${version}/pets-nested-array`;
};

export const listPetsNestedArray = async (
  params?: ListPetsNestedArrayParams,
  version: number = 1,
  options?: RequestInit,
): Promise<listPetsNestedArrayResponse> => {
  return useCustomClient<listPetsNestedArrayResponse>(
    getListPetsNestedArrayUrl(params, version),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getListPetsNestedArrayQueryKey = (
  params?: ListPetsNestedArrayParams,
  version: number = 1,
) => {
  return [
    `/v${version}/pets-nested-array`,
    ...(params ? [params] : []),
  ] as const;
};

export const useListPetsNestedArrayQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsNestedArrayParams,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListPetsNestedArrayQueryKey(params, version);

  const listPetsNestedArray = useListPetsNestedArrayHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>
  > = ({ signal }) => listPetsNestedArray(params, version, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!version,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListPetsNestedArrayQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>
>;
export type ListPetsNestedArrayQueryError = ErrorType<Error>;

/**
 * @summary List all pets as nested array
 */

export function useListPetsNestedArray<
  TData = Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>,
  TError = ErrorType<Error>,
>(
  params?: ListPetsNestedArrayParams,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useListPetsNestedArrayHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useListPetsNestedArrayQueryOptions(
    params,
    version,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse200 = {
  data: Pet;
  status: 200;
};

export type showPetByIdResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type showPetByIdResponseSuccess = showPetByIdResponse200 & {
  headers: Headers;
};
export type showPetByIdResponseError = showPetByIdResponseDefault & {
  headers: Headers;
};

export type showPetByIdResponse =
  | showPetByIdResponseSuccess
  | showPetByIdResponseError;

export const getShowPetByIdUrl = (petId: string, version: number = 1) => {
  return `/v${version}/pets/${petId}`;
};

export const showPetById = async (
  petId: string,
  version: number = 1,
  options?: RequestInit,
): Promise<showPetByIdResponse> => {
  return useCustomClient<showPetByIdResponse>(
    getShowPetByIdUrl(petId, version),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getShowPetByIdQueryKey = (petId?: string, version: number = 1) => {
  return [`/v${version}/pets/${petId}`] as const;
};

export const useShowPetByIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = ErrorType<Error>,
>(
  petId: string,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId, version);

  const showPetById = useShowPetByIdHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>
  > = ({ signal }) => showPetById(petId, version, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(version && petId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>
>;
export type ShowPetByIdQueryError = ErrorType<Error>;

/**
 * @summary Info for a specific pet
 */

export function useShowPetById<
  TData = Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
  TError = ErrorType<Error>,
>(
  petId: string,
  version: number = 1,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useShowPetByIdHook>>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useShowPetByIdQueryOptions(petId, version, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
