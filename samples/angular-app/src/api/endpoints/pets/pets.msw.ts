/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';
import type { RequestHandlerOptions } from 'msw';

import type { Pet, Pets } from '../../model';

export const getSearchPetsResponseMock = (): Pets =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: (() => faker.person.lastName())(),
    tag: (() => faker.person.lastName())(),
    requiredNullableString: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    optionalNullableString: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  }));

export const getListPetsResponseMock = (): Pets =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    name: (() => faker.person.lastName())(),
    tag: (() => faker.person.lastName())(),
    requiredNullableString: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    optionalNullableString: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  }));

export const getShowPetByIdResponseMock = () =>
  (() => ({
    id: faker.number.int({ min: 1, max: 99 }),
    name: faker.person.firstName(),
    tag: faker.helpers.arrayElement([faker.word.sample(), void 0]),
  }))();

export const getShowPetTextResponseMock = (): string => faker.word.sample();

export const getDownloadFileResponseMock = (): Blob =>
  new Blob(faker.helpers.arrayElements(faker.word.words(10).split(' ')));

export const getSearchPetsMockHandler = (
  overrideResponse?:
    | Pets
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pets> | Pets),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/v:version/search',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getSearchPetsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getListPetsMockHandler = (
  overrideResponse?:
    | Pets
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pets> | Pets),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/v:version/pets',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getListPetsResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getCreatePetsMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/v:version/pets',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 201 });
    },
    options,
  );
};

export const getShowPetByIdMockHandler = (
  overrideResponse?:
    | Pet
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet> | Pet),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/v:version/pets/:petId',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getShowPetByIdResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};

export const getShowPetTextMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/v:version/pets/:petId/text',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getShowPetTextResponseMock(),
        { status: 200, headers: { 'Content-Type': 'text/plain' } },
      );
    },
    options,
  );
};

export const getUploadFileMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    '*/v:version/pet/:petId/uploadImage',
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === 'function') {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getDownloadFileMockHandler = (
  overrideResponse?:
    | Blob
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Blob> | Blob),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    '*/v:version/pet/:petId/downloadImage',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getDownloadFileResponseMock(),
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } },
      );
    },
    options,
  );
};
export const getPetsMock = () => [
  getSearchPetsMockHandler(),
  getListPetsMockHandler(),
  getCreatePetsMockHandler(),
  getShowPetByIdMockHandler(),
  getShowPetTextMockHandler(),
  getUploadFileMockHandler(),
  getDownloadFileMockHandler(),
];
