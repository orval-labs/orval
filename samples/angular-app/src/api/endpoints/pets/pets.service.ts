/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type { CreatePetsBody, ListPetsParams, Pet, Pets } from '../../model';

import listPetsMutator from '../../mutator/response-type';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class PetsService {
  private readonly http = inject(HttpClient);
  /**
   * @summary List all pets
   */
  listPets<TData = Pets>(params?: ListPetsParams, version: number = 1) {
    return listPetsMutator<TData>(
      { url: `/v${version}/pets`, method: 'GET', params },
      this.http,
    );
  }
  /**
   * @summary Create a pet
   */
  createPets<TData = null>(
    createPetsBody: CreatePetsBody,
    version?: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  createPets<TData = null>(
    createPetsBody: CreatePetsBody,
    version?: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  createPets<TData = null>(
    createPetsBody: CreatePetsBody,
    version?: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  createPets<TData = null>(
    createPetsBody: CreatePetsBody,
    version: number = 1,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/v${version}/pets`, createPetsBody, options);
  }
  /**
   * @summary Info for a specific pet
   */
  showPetById<TData = Pet>(
    petId: string,
    version?: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  showPetById<TData = Pet>(
    petId: string,
    version?: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  showPetById<TData = Pet>(
    petId: string,
    version?: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  showPetById<TData = Pet>(
    petId: string,
    version: number = 1,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/v${version}/pets/${petId}`, options);
  }
}

export type ListPetsClientResult = NonNullable<Pets>;
export type CreatePetsClientResult = never;
export type ShowPetByIdClientResult = NonNullable<Pet>;
