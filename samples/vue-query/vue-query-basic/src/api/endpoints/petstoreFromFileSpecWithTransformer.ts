/**
 * Generated by orval v8.0.0-rc.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/vue-query';
import type {
  DataTag,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryReturnType,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';

import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';

import type {
  CreatePetsBody,
  Error,
  ListPetsParams,
  Pet,
  Pets,
} from '../model';

import { customInstance } from '../mutator/custom-instance';

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 407
  | 408
  | 409
  | 410
  | 411
  | 412
  | 413
  | 414
  | 415
  | 416
  | 417
  | 418
  | 419
  | 420
  | 421
  | 422
  | 423
  | 424
  | 426
  | 428
  | 429
  | 431
  | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes =
  | HTTPStatusCode1xx
  | HTTPStatusCode2xx
  | HTTPStatusCode3xx
  | HTTPStatusCode4xx
  | HTTPStatusCode5xx;

/**
 * @summary List all pets
 */
export type listPetsResponse200 = {
  data: Pets;
  status: 200;
};

export type listPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type listPetsResponseSuccess = listPetsResponse200 & {
  headers: Headers;
};
export type listPetsResponseError = listPetsResponseDefault & {
  headers: Headers;
};

export type listPetsResponse = listPetsResponseSuccess | listPetsResponseError;

export const getListPetsUrl = (
  params?: ListPetsParams,
  version: number | undefined | null = 1,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/v${version}/pets?${stringifiedParams}`
    : `/v${version}/pets`;
};

export const listPets = async (
  params?: ListPetsParams,
  version: number | undefined | null = 1,
  options?: RequestInit,
): Promise<listPetsResponse> => {
  return customInstance<listPetsResponse>(getListPetsUrl(params, version), {
    ...options,
    method: 'GET',
  });
};

export const getListPetsInfiniteQueryKey = (
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
) => {
  return [
    'infinite',
    'v',
    version,
    'pets',
    ...(params ? [params] : []),
  ] as const;
};

export const getListPetsQueryKey = (
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
) => {
  return ['v', version, 'pets', ...(params ? [params] : [])] as const;
};

export const getListPetsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof listPets>>,
    ListPetsParams['limit']
  >,
  TError = Error,
>(
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listPets>>,
        TError,
        TData,
        QueryKey,
        ListPetsParams['limit']
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getListPetsInfiniteQueryKey(params, version);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listPets>>,
    QueryKey,
    ListPetsParams['limit']
  > = ({ signal, pageParam }) =>
    listPets(
      { ...unref(params), limit: pageParam || unref(params)?.['limit'] },
      version,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(version)),
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listPets>>,
    TError,
    TData,
    QueryKey,
    ListPetsParams['limit']
  >;
};

export type ListPetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsInfiniteQueryError = Error;

/**
 * @summary List all pets
 */

export function useListPetsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof listPets>>,
    ListPetsParams['limit']
  >,
  TError = Error,
>(
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof listPets>>,
        TError,
        TData,
        QueryKey,
        ListPetsParams['limit']
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListPetsInfiniteQueryOptions(
    params,
    version,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getListPetsQueryOptions = <
  TData = Awaited<ReturnType<typeof listPets>>,
  TError = Error,
>(
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPets>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getListPetsQueryKey(params, version);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPets>>> = ({
    signal,
  }) => listPets(unref(params), unref(version), signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(version)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof listPets>>, TError, TData>;
};

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = Error;

/**
 * @summary List all pets
 */

export function useListPets<
  TData = Awaited<ReturnType<typeof listPets>>,
  TError = Error,
>(
  params?: MaybeRef<ListPetsParams>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listPets>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListPetsQueryOptions(params, version, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * @summary Create a pet
 */
export type createPetsResponse200 = {
  data: Pet;
  status: 200;
};

export type createPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type createPetsResponseSuccess = createPetsResponse200 & {
  headers: Headers;
};
export type createPetsResponseError = createPetsResponseDefault & {
  headers: Headers;
};

export type createPetsResponse =
  | createPetsResponseSuccess
  | createPetsResponseError;

export const getCreatePetsUrl = (version: number | undefined | null = 1) => {
  return `/v${version}/pets`;
};

export const createPets = async (
  createPetsBody: CreatePetsBody,
  version: number | undefined | null = 1,
  options?: RequestInit,
): Promise<createPetsResponse> => {
  return customInstance<createPetsResponse>(getCreatePetsUrl(version), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPetsBody),
  });
};

export const getCreatePetsMutationOptions = <
  TError = Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPets>>,
    TError,
    { data: CreatePetsBody; version?: number | undefined | null },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPets>>,
  TError,
  { data: CreatePetsBody; version?: number | undefined | null },
  TContext
> => {
  const mutationKey = ['createPets'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPets>>,
    { data: CreatePetsBody; version?: number | undefined | null }
  > = (props) => {
    const { data, version } = props ?? {};

    return createPets(data, version);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationBody = CreatePetsBody;
export type CreatePetsMutationError = Error;

/**
 * @summary Create a pet
 */
export const useCreatePets = <TError = Error, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPets>>,
      TError,
      { data: CreatePetsBody; version?: number | undefined | null },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof createPets>>,
  TError,
  { data: CreatePetsBody; version?: number | undefined | null },
  TContext
> => {
  const mutationOptions = getCreatePetsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse200 = {
  data: Pet;
  status: 200;
};

export type showPetByIdResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type showPetByIdResponseSuccess = showPetByIdResponse200 & {
  headers: Headers;
};
export type showPetByIdResponseError = showPetByIdResponseDefault & {
  headers: Headers;
};

export type showPetByIdResponse =
  | showPetByIdResponseSuccess
  | showPetByIdResponseError;

export const getShowPetByIdUrl = (
  petId: string | undefined | null,
  version: number | undefined | null = 1,
) => {
  return `/v${version}/pets/${petId}`;
};

export const showPetById = async (
  petId: string | undefined | null,
  version: number | undefined | null = 1,
  options?: RequestInit,
): Promise<showPetByIdResponse> => {
  return customInstance<showPetByIdResponse>(
    getShowPetByIdUrl(petId, version),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getShowPetByIdInfiniteQueryKey = (
  petId?: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
) => {
  return ['infinite', 'v', version, 'pets', petId] as const;
};

export const getShowPetByIdQueryKey = (
  petId?: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
) => {
  return ['v', version, 'pets', petId] as const;
};

export const getShowPetByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof showPetById>>>,
  TError = Error,
>(
  petId: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof showPetById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getShowPetByIdInfiniteQueryKey(petId, version);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
    signal,
  }) => showPetById(petId, version, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(version) && unref(petId))),
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof showPetById>>,
    TError,
    TData
  >;
};

export type ShowPetByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdInfiniteQueryError = Error;

/**
 * @summary Info for a specific pet
 */

export function useShowPetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof showPetById>>>,
  TError = Error,
>(
  petId: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof showPetById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getShowPetByIdInfiniteQueryOptions(
    petId,
    version,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getShowPetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof showPetById>>,
  TError = Error,
>(
  petId: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showPetById>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getShowPetByIdQueryKey(petId, version);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
    signal,
  }) => showPetById(unref(petId), unref(version), signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(version) && unref(petId))),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof showPetById>>, TError, TData>;
};

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = Error;

/**
 * @summary Info for a specific pet
 */

export function useShowPetById<
  TData = Awaited<ReturnType<typeof showPetById>>,
  TError = Error,
>(
  petId: MaybeRef<string | undefined | null>,
  version: MaybeRef<number | undefined | null> = 1,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof showPetById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getShowPetByIdQueryOptions(petId, version, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

/**
 * @summary This is required to test case when there are no parameters (this path is ignored in add-version transformer), see https://github.com/orval-labs/orval/issues/857#issuecomment-1835317990
 */
export type postApiV1UserLogoutResponse200 = {
  data: void;
  status: 200;
};

export type postApiV1UserLogoutResponseSuccess =
  postApiV1UserLogoutResponse200 & {
    headers: Headers;
  };
export type postApiV1UserLogoutResponse = postApiV1UserLogoutResponseSuccess;

export const getPostApiV1UserLogoutUrl = () => {
  return `/api/v1/user/logout`;
};

export const postApiV1UserLogout = async (
  options?: RequestInit,
): Promise<postApiV1UserLogoutResponse> => {
  return customInstance<postApiV1UserLogoutResponse>(
    getPostApiV1UserLogoutUrl(),
    {
      ...options,
      method: 'POST',
    },
  );
};

export const getPostApiV1UserLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1UserLogout>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1UserLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['postApiV1UserLogout'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1UserLogout>>,
    void
  > = () => {
    return postApiV1UserLogout();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1UserLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1UserLogout>>
>;

export type PostApiV1UserLogoutMutationError = unknown;

/**
 * @summary This is required to test case when there are no parameters (this path is ignored in add-version transformer), see https://github.com/orval-labs/orval/issues/857#issuecomment-1835317990
 */
export const usePostApiV1UserLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1UserLogout>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1UserLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1UserLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
